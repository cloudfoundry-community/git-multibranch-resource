#!/bin/bash
# vim: set ft=sh

set -e

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

source $(dirname $0)/common.sh

destination=$1

if [ -z "$destination" ]; then
  echo "usage: $0 <path/to/destination>" >&2
  exit 1
fi

# for jq
PATH=/usr/local/bin:$PATH

payload=$(mktemp $TMPDIR/git-resource-request.XXXXXX)

cat > $payload <&0

load_pubkey $payload
configure_git_ssl_verification $payload

uri=$(jq -r '.source.uri // ""' < $payload)
branch=$(jq -r '.source.branch // ""' < $payload)
ref=$(jq -r '.version.ref // "HEAD"' < $payload)
depth=$(jq -r '(.params.depth // 0)' < $payload)
fetch=$(jq -r '(.params.fetch // [])[]' < $payload)
submodules=$(jq -r '(.params.submodules // "all")' < $payload)
disable_git_lfs=$(jq -r '.params.disable_git_lfs // ""' < $payload)

## Redis stuff to support cleaner multibranch wait-for-previous behaviour
redis_host=$(jq -r '.source.redis.host // ""' < $payload)
if [ -n "$redis_host" ] ; then
  redis_password=$(jq -r '.source.redis.password // ""' < $payload)
  redis_dbnum=$(jq -r '.source.redis.db_number // "0"' < $payload)
  redis_prefix=$(jq -r '.source.redis.prefix // ""' < $payload)
fi

[[ -z "$fetch" ]] && single_branch_flag="--single-branch " || single_branch_flag=''

if [ -z "$uri" ]
then
  echo "invalid payload (missing uri):" >&2
  cat $payload >&2
  exit 1
fi

echo "$ref"

# Strip any extra multi-branch refs
original_ref="$ref"
ref="${ref%%:*}"

ref_extras=":${original_ref#*:}"
if [ "$ref_extras" = ":$original_ref" ]
then
  ref_extras=""
else
  ref_and_branch="${original_ref%% *}"
  branch="${ref_and_branch##*:}"
fi

branchflag=""
if [ -n "$branch" ]
then
  branchflag="--branch $branch"
fi

depthflag=""
if test "$depth" -gt 0 2> /dev/null
then
  depthflag="--depth $depth"
fi

if [ "$disable_git_lfs" == "true" ]
then
  export GIT_LFS_SKIP_SMUDGE="true"
fi

echo "Cloning: git clone ${single_branch_flag}$depthflag $uri $branchflag $destination"
git clone ${single_branch_flag}${depthflag} $uri $branchflag $destination

cd $destination

git checkout -q $ref
git log -1 --oneline
git clean --force --force -d
if [[ -n "$branch" ]] 
then
  git config --local concourse-ci.branch-name $branch
fi

if [ "$submodules" == "all" ]
then
  git submodule update --init  $depthflag --recursive
elif [ "$submodules" != "none" ]
then
  submodules=$(echo $submodules | jq -r '(.[])')
  for submodule in $submodules
  do
    git submodule update --init $depthflag --recursive $submodule
  done
fi

for branch in $fetch
do
  if [ -z "$(git branch --list $branch)" ] ; then
    git fetch origin $branch
    git branch $branch FETCH_HEAD
  fi
done

if [ -n "$redis_host" ]
then
  db_opt="${redis_dbnum:+" -n $redis_dbnum"}"
  pw_opt="${redis_password:+" -a '$redis_password'"}"
  key="${redis_prefix:+"${redis_prefix}:"}fetched:${ref}:${branch}"
  redis_result="$(eval "redis-cli -h '${redis_host}'${db_opt}${pw_opt} set '${key}' 'true'")"
  if [ "${redis_result}" != "OK" ] ; then
    echo "Could not record that ref has been fetched: $redis_result" >&2
    exit 1
  fi
fi

new_ref="$(echo "$(git rev-parse HEAD)$ref_extras" | jq -R .)"
jq -n "{
  version: {ref: $new_ref},
  metadata: $(git_metadata)
}" >&3
